{"version":3,"file":"ramda-extra.js","sources":["../../src/ramda-extra.js"],"sourcesContent":["// @flow\n\nimport * as R from 'ramda'\n\ntype NormalizedResult<V> = {\n  keys: Array<V>,\n  itemsByKey: Object, // flowlint-line unclear-type:off\n}\n\ntype EnumOptions = {\n  keyFn: string => string,\n  valueFn: () => mixed,\n}\n\nconst argList = R.unapply(R.identity)\nconst override = R.flip(R.merge)\n\nconst isNilOrEmpty: (value: mixed) => boolean = R.either(R.isNil, R.isEmpty)\nconst isNotNil: (value: mixed) => boolean = R.complement(R.isNil)\nconst isNotEmpty = R.complement(R.isEmpty)\n\nfunction isNotNilOrEmpty(\n  value: ?Array<mixed> | Object | string | null // flowlint-line unclear-type:off\n): boolean {\n  if (R.isNil(value)) {\n    return false\n  }\n\n  if (R.is(Object, value) || R.is(String, value)) {\n    return !R.isEmpty(value)\n  }\n\n  return true\n}\n\nconst extractKey = key => R.pipe(R.prop(key), R.toString)\n\n// flowlint-next-line unclear-type:off\nfunction normalizeBy<K: string, V, T: $ReadOnlyArray<Object>>(\n  key: K,\n  items: T\n): NormalizedResult<V> {\n  const keys: Array<V> = R.pluck(key, items)\n  const itemsByKey = R.indexBy(extractKey(key), items)\n  return { keys, itemsByKey }\n}\n\nconst DEFAULT_ENUM_OPTIONS: EnumOptions = {\n  keyFn: R.identity,\n  valueFn: R.identity,\n}\n\n// flowlint-next-line unclear-type:off\nfunction defineEnums(options: EnumOptions, keys: Array<string>): Object {\n  const { keyFn, valueFn } = R.merge(DEFAULT_ENUM_OPTIONS, options || {})\n\n  return R.reduce(\n    (acc, key) => R.assoc(keyFn(key), valueFn(key), acc),\n    {},\n    keys || []\n  )\n}\n\nconst defineEnumsCurried = R.curryN(2, defineEnums)\n\nexport {\n  argList,\n  defineEnumsCurried as defineEnums,\n  isNilOrEmpty,\n  isNotEmpty,\n  isNotNil,\n  isNotNilOrEmpty,\n  normalizeBy,\n  override,\n}\n"],"names":["argList","R","override","isNilOrEmpty","isNotNil","isNotEmpty","isNotNilOrEmpty","value","Object","String","extractKey","key","normalizeBy","items","keys","itemsByKey","DEFAULT_ENUM_OPTIONS","defineEnums","options","keyFn","valueFn","acc","defineEnumsCurried"],"mappings":";;AAcA,IAAMA,UAAUC,OAAA,CAAUA,QAAV,CAAhB;AACA,IAAMC,WAAWD,IAAA,CAAOA,KAAP,CAAjB;;AAEA,IAAME,eAA0CF,MAAA,CAASA,KAAT,EAAkBA,OAAlB,CAAhD;AACA,IAAMG,WAAsCH,UAAA,CAAaA,KAAb,CAA5C;AACA,IAAMI,aAAaJ,UAAA,CAAaA,OAAb,CAAnB;;AAEA,SAASK,eAAT,CACEC,KADF,EAEW;MACLN,KAAA,CAAQM,KAAR,CAAJ,EAAoB;WACX,KAAP;;;MAGEN,EAAA,CAAKO,MAAL,EAAaD,KAAb,KAAuBN,EAAA,CAAKQ,MAAL,EAAaF,KAAb,CAA3B,EAAgD;WACvC,CAACN,OAAA,CAAUM,KAAV,CAAR;;;SAGK,IAAP;;;AAGF,IAAMG,aAAa,SAAbA,UAAa;SAAOT,IAAA,CAAOA,IAAA,CAAOU,GAAP,CAAP,EAAoBV,QAApB,CAAP;CAAnB;;AAGA,SAASW,WAAT,CACED,GADF,EAEEE,KAFF,EAGuB;MACfC,OAAiBb,KAAA,CAAQU,GAAR,EAAaE,KAAb,CAAvB;MACME,aAAad,OAAA,CAAUS,WAAWC,GAAX,CAAV,EAA2BE,KAA3B,CAAnB;SACO,EAAEC,UAAF,EAAQC,sBAAR,EAAP;;;AAGF,IAAMC,uBAAoC;SACjCf,QADiC;WAE/BA;CAFX;;AAMA,SAASgB,WAAT,CAAqBC,OAArB,EAA2CJ,IAA3C,EAAwE;iBAC3Cb,KAAA,CAAQe,oBAAR,EAA8BE,WAAW,EAAzC,CAD2C;MAC9DC,KAD8D,YAC9DA,KAD8D;MACvDC,OADuD,YACvDA,OADuD;;SAG/DnB,MAAA,CACL,UAACoB,GAAD,EAAMV,GAAN;WAAcV,KAAA,CAAQkB,MAAMR,GAAN,CAAR,EAAoBS,QAAQT,GAAR,CAApB,EAAkCU,GAAlC,CAAd;GADK,EAEL,EAFK,EAGLP,QAAQ,EAHH,CAAP;;;AAOF,IAAMQ,qBAAqBrB,MAAA,CAAS,CAAT,EAAYgB,WAAZ,CAA3B;;;;"}